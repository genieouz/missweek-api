import { ClientFilterInput } from '~/commons/graphql/types-and-inputs/client-filter.input';
import { Document, Model } from 'mongoose';
import { IUpdateResult } from '~/commons/typings/mongoose.typings';
import { AnyObject } from '~/commons/typings/typescript';
export declare abstract class AbstractService<T extends Document> {
    private abstractModel;
    protected constructor(model: Model<T>);
    insertOne(payload: AnyObject): Promise<T>;
    insertMany(payload: AnyObject[]): Promise<any>;
    upsertOne(queryFilter: AnyObject, payload: AnyObject): Promise<T>;
    findOne(queryFilter: AnyObject): Promise<T>;
    findLastUpdated(queryFilter: AnyObject): Promise<T>;
    findMany(queryFilter: AnyObject, clientFilter?: ClientFilterInput): Promise<T[]>;
    findManyByIds(ids: string[], clientFilter?: ClientFilterInput): Promise<T[]>;
    findOneById(id: string): Promise<T>;
    findOneByIdOrFail(id: string): Promise<T>;
    failIfFoundById(id: string): Promise<void>;
    failIfFound(queryFilter: any, opts?: ClientFilterInput): Promise<void>;
    removeOneById(id: string): Promise<boolean>;
    removeOneByIdOrFail(id: string): Promise<boolean>;
    removeOneOrFail(queryFilter: AnyObject): Promise<boolean>;
    findOneOrFail(queryFilter: AnyObject): Promise<T>;
    updateOneById(id: string, payload: AnyObject): Promise<T>;
    addChildToArray<A>(parentId: string, arrayField: string, childDoc: object): Promise<A>;
    removeChildFromArrayById(parentId: string, arrayField: string, childId: string): Promise<boolean>;
    removeChildFromArray(parentId: string, arrayField: string, childValue: string): Promise<boolean>;
    findChildFromArrayOrFail(parentId: string, arrayField: string, childId: string): Promise<any>;
    updateChildInArray(parentId: string, arrayField: string, childId: string, childDoc: object): Promise<boolean>;
    addToSet(queryFilter: AnyObject, setProp: string, value: string): Promise<boolean>;
    updateMany(queryFilter: AnyObject, payload: AnyObject, clientFilter?: ClientFilterInput): Promise<IUpdateResult>;
    findManyAndUpdate(queryFilter: AnyObject, payload: AnyObject, opts?: ClientFilterInput): Promise<T[]>;
    count(queryFilter?: AnyObject, clientFilter?: ClientFilterInput): Promise<number>;
    copyDocument(doc: T): T;
    cloneById(id: string): Promise<T>;
    cloneByIdOrFail(id: string): Promise<T>;
    updatedGrandchildToLiteralSet(parentId: string, arrayField: string, arrayFieldNested: string, childId: string, grandChildId: string, grandChildDoc: object): Promise<boolean>;
    addGrandchildToLiteralSet(parentId: string, arrayField: string, arrayFieldNested: string, childId: string, grandchildLiteral: any): Promise<T>;
    removeGrandchildFromLiteralSet(parentId: string, arrayField: string, arrayFieldNested: string, childId: string, grandchildLiteral: any): Promise<boolean>;
    findGrandchildFromLiteralSet(arrayField: string, arrayFieldNested: string, grandchildField: string, grandchildLiteral: any): Promise<any>;
    removeManyByIds(ids: string[]): Promise<number>;
    removeMany(queryFilter: AnyObject, clientFilter?: ClientFilterInput): Promise<number>;
}
